**Diferentes formas de definir un componente
    La forma en la que se trabajan los componentes en TypeScript con React es con 
    la extensión .tsx. (archivos de TypeScript que incluyen JSX).

    Hay distintas formas de definir un componente en React con TypeScript, veamos 
    las 4 formas más comunes de hacer esto:

    **// Forma implícito (JSX:Element)**
    const MyComponent = () => {
      return (
        <div>
          <h1>Hola!</h1>
        </div>
      )
    }

    **// Forma explícita "JSX.Element"**
    const MyComponent = (): JSX.Element => {
      return (
        <div>
          <h1>Hola!</h1>
        </div>
      )
    }

    **// Usando tipos de React "FunctionComponent"**
    import type { FunctionComponente } from "react"
    ****
    const MyComponent: FunctionComponent = () => {
      return (
        <div>
          <h1>Hola!</h1>
        </div>
      )
    }

    **// Usando tipos de React "FC"**
    import type { FC } from "react"
    ****
    const MyComponent: FC = () => {
      return (
        <div>
          <h1>Hola!</h1>
        </div>
      )
    }
    Hoy en día, el estándar que se manera comúnmente es la segunda manera 
    Forma explícita "JSX.Element", este es el formato de que debemos utilizar.

    https://github.com/facebook/create-react-app/pull/8177 

 ** El objeto props y children  

  Para poder usar las props con TSX primero tenemos que tipar el objeto de props. 
  Lo hacemos asignándole un tipo por cada prop que tengamos, y para hacerlo mas 
  mantenible, separamos esos tipos en un objeto aparte 
  (ya sea con type o interface).

  // RandomFox.tsx
      type Props = {
        image: string;
        alt: string;
        // another prop
      };
    export const RandomFox = ({ image, alt }: Props): JSX.Element => {
    // Lo que hicimos fue desestructurar el objeto props para 
    // quedarnos solo con lo que necesitamos (image y alt)
      return (
        <img width={320} height='auto' src={image} alt={alt} className='rounded' />
      );
    };

   //Con interface
   interface Props {
    image: string;
  }

  export const RandomFox = ({ image }: Props): JSX.Element => {
    return <img className="rounded" width={320} height="auto" src={image} />;
  }; 

***State con tipos primitivos
    Los estados pueden recibir tipos de datos primitivos como un string, number, 
    boolean.

    Para esta oportunidad vamos a ver que el hook de react useState, tiene un 
    generador (generator) que permite saber qué va a inferir su motor de 
    interpretación.

    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];
        // convenience overload when first argument is omitted
        /**
        * Returns a stateful value, and a function to update it.
        *
        * @version 16.8.0
        * @see https://reactjs.org/docs/hooks-reference.html#usestate
        */
    La <S> quiere referirse a la inicial del state (estado). En pocas palabras: es 
    una variable que recibe y asigna.

    En nuestro proyecto, vamos a hacer este ejemplo con varias imágenes que vamos 
    a recibir.

    Necesitamos hacer importación del hook de react: useState

    import { useState } from "react";
    Después creamos el array que va a recibir:

    const [images, setImages] = useState<Array<string>>([
        `https://randomfox.ca/images/${randomNumber()}.jpg`,
        `https://randomfox.ca/images/${randomNumber()}.jpg`,
        `https://randomfox.ca/images/${randomNumber()}.jpg`,
        `https://randomfox.ca/images/${randomNumber()}.jpg`,
      ]);
    Y por último en el componente principal, como TypeScript ya sabe que el valor 
    del estado y conoce que es un array; podemos utilizar todos los métodos 
    del array:

    return(
    ...
    <main>
            <h1 className="text-3xl font-bold underline">Hello world!</h1>
            {images.map((image, index) => (
              <div key={index} className="p-4">
                <RandomFox image={image} />
              </div>
            ))}
          </main>
    )

***STATE CON OTROS TIPOS
      Generalmente como respuesta de un api no es un Array, si no mas bien son 
      objetos JSON.

      Vamos a simular que recibimos un objeto con un id y un url con la imagen 
      zorros. Para generar una id única vamos a utilizar el siguiente código.

      // generate simple unique id
      const generateId = (): string => {
        return (
          Math.random().toString(36).substring(2, 15) +
          Math.random().toString(36).substring(2, 15)
        );
      };

      Ahora debemos cambiar el generator de useState de tipo Array al tipo 
      ImageItems( un Array de objetos con un id: string y ulr:string)

      type ImageItems =Array<{id:string, url:string}>

      const Home: NextPage = () => {

        const [images, setImages] = useState<ImageItems>([
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
        ]);

        return (

      También podríamos generar el tipo ImageItem (sin el plural), que seria la 
      mínima representación del objeto que queremos tipar. un objeto singular con 
      id: string y url: string

      type ImageItem = {id:string, url:string}

      const Home: NextPage = () => {

        const [images, setImages] = useState<Array<ImageItem>>([
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
          {id:generateId(), url:`https://randomfox.ca/images/${randomNumber()}.jpg` },
        ]);

        return (

      Hacerlo de esta manera nos da la ventaja al momento de utilizar el metodo 
      map. TypeScript sabrá que la unidad es de tipo ImageItem.
      
      OJO: Recuerda que ahora nuestro estado este compuesto de 2 valores. 
      Entonces debes declarar el valor de image.url y el image. id para los pasar 
      las props al componente RamdomFox o desestructurar los valores para obtener 
      la url y el id

            <main >
              {images.map(({id, url}) => (
                <div key={id} className="p-4">
                  <RandomFox image={url} alt={`fox`}/>
                </div>
              ))}
            </main>

***Tipos para eventos y callbacks de escuchadores

  A medida que desarrollamos aplicaciones en TypeScript, una de las tareas más importantes es 
  asegurarnos de que estamos trabajando con tipos de datos precisos y seguros. 

  Esto es particularmente importante cuando trabajamos con eventos y callbacks de escuchadores 
  en React, ya que necesitamos especificar el tipo de evento que se está produciendo.

  Afortunadamente, muchas librerías y frameworks modernos ya proporcionan tipos de datos 
  precisos y completos para eventos. 

  Esto significa que podemos confiar en que las funciones que estamos utilizando son seguras 
  y precisas.

  Para asegurarnos de que estamos utilizando los tipos de datos correctos para eventos, 
  necesitamos asegurarnos de que nuestra configuración de TypeScript incluya las librerías 
  que estamos utilizando. 

  Podemos hacer esto especificando las librerías que estamos usando en nuestro archivo 

  tsconfig.json.

  {
    "compilerOptions": {
      ...
      **"lib": ["DOM", "DOM.Iterable", "ESNext"]**, // especificamos las librerías que usamos
      ...
    },
    ...
  }
  Una vez que hemos configurado nuestro proyecto correctamente, podemos inspeccionar los tipos 
  de eventos utilizando el editor de código que estemos utilizando. 

  Por ejemplo, si queremos saber el tipo de datos que se produce en un evento onClick de un 
  botón, podemos simplemente hacer hover sobre el método onClick y buscar su definición.

  El editor de código nos mostrará la definición del método onClick, junto con información 
  sobre su tipo de datos:

  En este caso, el tipo de datos del evento es React.MouseEvent<HTMLButtonElement>. 

  Esto significa que podemos utilizar este tipo de datos para especificar el tipo de datos 
  que se produce en nuestro callback de escuchador de eventos.

  Por ejemplo, podemos definir una función addNewFox que se llama cuando se hace clic en un 
  botón. 

  Para especificar el tipo de datos del evento que se produce, podemos incluir 
  React.MouseEvent<HTMLButtonElement> como argumento de nuestra función:

    function App(): JSX.Element {
      const addNewFox = (**event: React.MouseEvent<HTMLButtonElement>**): void => {
        event.preventDefault()
        const target = event.target

        // ...
      }

      return (
        // JSX del componente App...
      )
    }
  En este ejemplo, la función addNewFox toma un argumento de tipo 

    React.MouseEvent<HTMLButtonElement>. 
  Esto nos permite acceder a las propiedades del evento de manera segura y precisa, sin 
  tener que utilizar tipos de datos genéricos como any.

  También, podemos hacer la importación de los tipos de manera directa:

    // importación del tipo desde React
    import type { MouseEvent } from "react"

    function App(): JSX.Element {
      // Evitamos escribir de donde viene "React"
      const addNewFox = (event: MouseEvent<HTMLButtonElement>): void => {
        event.preventDefault()
        const target = event.target

        // ...
      }

      return (
        // JSX del componente App...
      )
    }
    Esto dependerá bastante de la librería que estemos usando junto con React.

***Tipos para referencias y observadores
    
    const myRef = useRef<Type>(initialValue);

    onde o Type é o tipo de valor que se almacenará en la referencia y initialValue es el 
    valor inicial de la referencia.

    En este caso, el useRef se usa para tomar el valor del elemento y conocer de la imagen, 
    en que momento y en qué posición se encuentra dentro del viewport.

    Cuando trabajamos con React y TypeScript, puede que nos encontremos con problemas a la hora de utilizar referencias y observadores en nuestros componentes. Esto se debe a que, dependiendo del objeto HTML con el que estemos trabajando, necesitamos tener en cuenta ciertos conceptos para que nuestro código sea válido.

  **Digamos que vamos a nuestro componente RandomFox y queremos añadir una referencia con 
    useRef().

    export default function RandomFox( { image }: Props ):JSX.Element {  
      const node = useRef()

      return (
        <img **ref={node}** src={ image } className="w-80 h-auto rounded-lg" />
      )
    }
    Incluso si especificamos que la referencia será de tipo HTMLImageElement en el generic de
     useRef(), el error persiste:

    const node = useRef<HTMLImageElement> ()

    // Esto seguirá dando error
    
    <img **ref={node}** src={ image } className="w-80 h-auto rounded-lg" />
    
    La razón de este error es que el tipo de dato que useRef() devuelve por defecto es 
    undefined, mientras que el elemento <img> solo acepta referencias de tipo null cuando 
    no están asignadas. Por lo tanto, ambos tipos de dato no coinciden.

    Para solucionar este problema, debemos inicializar la referencia con un valor nulo en 
    lugar de dejarla sin asignar:

    export default function RandomFox( { image }: Props ):JSX.Element {  
      const node = useRef<HTMLImageElement> (null)

      return (
        <img ref={node} src={ image } className="w-80 h-auto rounded-lg" />
      )
    }
    
    De esta manera, ya no recibiremos el error en el linter y nuestra referencia será válida 
    para trabajar con el elemento <img>.
    Es importante tener en cuenta estos detalles cuando trabajamos con referencias y 
    observadores en React y TypeScript, ya que pueden generar errores difíciles de depurar. 
    
    Conocer estas diferencias nos permitirá solucionar problemas con mayor facilidad y 
    hacer un mejor uso del tipado de TypeScript en nuestros proyectos